

DB_ID = hsv1
DB_DIR = ./data/db/$(DB_ID)



#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Main rules
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
.PHONY:usage %.vcf.gz.all %.bam.all %.fasta.all

usage:
	@echo make "<fasta-file>.hsv1.asm.bam.all  | Align and perform variant calling from a FASTA containing an assembly"
	@echo make "<vcf-file>.all                 | Index and generate a variant calling report for a VCF file"
	@echo make "<bam-file>.all                 | Index and generate a coverage report for a FASTA file"
	
%.vcf.gz.all:%.vcf.gz; $(MAKE) $*.vcf.gz.html $*.vcf.gz.docx $*.vcf.gz.csi

%.bam.all:%.bam; $(MAKE) $*.bam.html $*.bam.bai

%.fasta.all:%.fasta
	$(MAKE) $*.asm.bam $*.asm.vcf.gz
	$(MAKE) $*.asm.bam.all $*.asm.vcf.gz.all


#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Useful rules for the reference database
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Make a GFF from a FASTA file
.PRECIOUS:data/db/%/ref.gff
data/db/%/ref.gff:data/db/%/ref.fasta; ./bin/fa2gff.R --out "$@" "$<"

# Index a FASTA file
.PRECIOUS:%.fasta.fai
%.fasta.fai:%.fasta; samtools faidx "$<"

# A phony rule to build the reference database
.PHONY: refdb
refdb:$(DB_DIR)/ref.fasta $(DB_DIR)/ref.fasta.fai $(DB_DIR)/ref.gff $(DB_DIR)/resistances.chk.xlsx $(DB_DIR)/template.docx


#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# BAM indexing and ONT read filtering rules
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
.PRECIOUS:%.bam.bai %.filt.bam %.10k.bam
%.bam.bai:%.bam; samtools index "$<"
%.filt.bam:%.bam; ./bin/ontbam_filter.R --out "$@" "$<"
%.10k.bam:%.bam; ./bin/ontbam_subsample.R --out "$@" "$<"


#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# VCF indexing rule
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
.PRECIOUS: %.vcf.gz.csi
%.vcf.gz.csi:%.vcf.gz; bcftools index -f "$<"



#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# 1a - Alignment and variant calling from a FASTA containing an assembly
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
%.$(DB_ID).asm.bam %.$(DB_ID).asm.vcf.gz %.$(DB_ID).asm.vcf.gz.csi:%.fasta refdb
	./bin/asm2vcf.sh --ref-fasta="$(DB_DIR)/ref.fasta" --ref-gff="$(DB_DIR)/ref.gff" --asm-fasta="$<" --out-prefix="$*.asm"

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# 1b - Variant calling from a BAM generated by minimap2 and containing aligned reads
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
%.vcf.gz %.vcf.gz.csi:%.bam %.bam.bai refdb
	./bin/ontbam2vcf.sh --ref-gff="$(DB_DIR)/ref.gff" --ref-fasta="$(DB_DIR)/ref.fasta" --bam="$<" --out="$@"

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# 4 - Generate reports
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
%.bam.html:%.bam %.bam.bai
	Rscript -e 'rmarkdown::render("notebooks/bam_report.Rmd",params=list(input_bam_file="$<"),knit_root_dir="$(PWD)",output_dir="$(@D)",output_file="$(@F)")'

%.vcf.gz.html:%.vcf.gz refdb
	Rscript -e 'rmarkdown::render("notebooks/vcf_report.Rmd",params=list(input_vcf_file="$<",input_db_dir="$(DB_DIR)",output_docx_report="$*.vcf.gz.docx"),knit_root_dir="$(PWD)",output_dir="$(@D)",output_file="$(@F)")'


#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Clean rule
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
%/clean:
	rm -f \
	  '$*'/*.filt.bam \
	  '$*'/*.10k.bam \
    '$*'/*.10k.vcf.gz \
	  '$*'/*.asm.bam \
	  '$*'/*.asm.vcf.gz \
	  '$*'/*.bai \
    '$*'/*.vcf.gz.csi \
	  '$*'/*.vcf.gz.html \
	  '$*'/*.vcf.gz.docx \
	  '$*'/*.bam.html


